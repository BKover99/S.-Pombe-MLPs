which(rownames(genotype)==x)
})
mappingData <- preMap(genotype=genotype,
phenotype=phenotype,
sampleInfo=sampleInfo,
scale=T)
###############################################################################
library(randomForest)
realScores <- rfMapper(mappingData = mappingData,
permute = F,
nforest = 100,
ntree = 150)
###############################################################################
permutedScores <- rfMapper(mappingData = mappingData,
permute = T,
nforest = 100,
ntree = 150,
nPermutations=10,
file="perm1.RData",
nCl=4,
clType="SOCK")
###############################################################################
pValues <- pEst(path="permutations_prepared/",
scores=realScores,
markersPerIteration = 350,
printProg = T,
pCorrection = "fdr")
###############################################################################
pValuesX <- pValues[mappingData$genotype2group]
chrVec <- read.csv("chrVec.tsv")[,1]
QTL_list <- QTLgrouper(pmat = pValuesX,
sigThreshold = 0.1,
corThreshold = 0.8,
distThreshold = 9,
genotype = genotype,
chrVec = chrVec)
###############################################################################
markerPositions <- read.table("markerPositions.tsv",sep="\t",header=T)
writeQTL(QTLlist = QTL_list,traitNames = "SPNCRNA.1571",markerPositions = markerPositions,path="myResults.qtl")
qtl <- readQTL(path = "myResults.qtl")
genotype2group
mappingData$genotype2group
pValues
mappingData$genotype2group
pValuesX
###############################################################################
pValues <- pEst(path="permutations_prepared/",
scores=realScores,
markersPerIteration = 350,
printProg = T,
pCorrection = "none")
###############################################################################
pValuesX <- pValues[mappingData$genotype2group]
chrVec <- read.csv("chrVec.tsv")[,1]
QTL_list <- QTLgrouper(pmat = pValuesX,
sigThreshold = 0.1,
corThreshold = 0.8,
distThreshold = 9,
genotype = genotype,
chrVec = chrVec)
###############################################################################
markerPositions <- read.table("markerPositions.tsv",sep="\t",header=T)
writeQTL(QTLlist = QTL_list,traitNames = "SPNCRNA.1571",markerPositions = markerPositions,path="myResults.qtl")
qtl <- readQTL(path = "myResults.qtl")
pValuesX
mappingData$genotype2group
min(pValuesX)
pValues
mappingData$genotype2group
mappingData
View(mappingData)
View(genotype)
View(markerPositions)
mappingData$genotype2group
#install.packages("/Users/bencekover/Downloads/RFQTL.tar.gz", repos = NULL)
library(RFQTL)
#install.packages("randomForest")
library(randomForest)
library(qqman)
#loading in the genotype presence-absence matrix
d<-read.table(file = '/Users/bencekover/Library/CloudStorage/OneDrive-UniversityCollegeLondon/MSci Bahler lab/S.-Pombe-biofilm/Bence folder/QTL mapping/SupplementaryDataset_S7_genotype.tsv', sep = '\t', header = TRUE)
genotype1<-d[,-c(1:4)]
genotype1<-data.matrix(genotype1)
genotype1<-t(genotype1)
#loading in the washing_phenotype measurements
phenotype1<-read.csv("/Users/bencekover/Library/CloudStorage/OneDrive-UniversityCollegeLondon/MSci Bahler lab/S.-Pombe-biofilm/Bence folder/QTL mapping/washing_phenotypes.csv")
phenotype1<-phenotype1[,-1]
phenotype1<-phenotype1[which(phenotype1$strain %in% rownames(genotype1)),]
strainNames1 <- phenotype1$strain
phenotype1 <- phenotype1$ratio
sampleInfo1 <- sapply(strainNames1,FUN=function(x){
which(rownames(genotype1)==x)
})
mappingData1 <- preMap(genotype=genotype1,
phenotype=phenotype1,
sampleInfo=sampleInfo1,
scale=T)
r=rfMapper(mappingData = mappingData1,
permute = F,
nforest = 100,#was 100
ntree = 100)
#Get accurate p-values by doing 3500 permutations (100x35)
#Here the wd is a folder in which your permutations will go
setwd("/Users/bencekover/Library/CloudStorage/OneDrive-UniversityCollegeLondon/MSci Bahler lab/S.-Pombe-biofilm/Bence folder/QTL mapping/permutations/permutations")
permutedScores1 <- rfMapper(mappingData = mappingData1,
permute = T,
nforest = 100,#was 100
ntree = 100,
nPermutations=10000, #was 100
file="wash_permut.RData",
nCl=6,
clType="SOCK")
#Below the wd is the folder in which the permutations folder is (not IN the permutation folder)
setwd("/Users/bencekover/Library/CloudStorage/OneDrive-UniversityCollegeLondon/MSci Bahler lab/S.-Pombe-biofilm/Bence folder/QTL mapping/permutations")
#The path below is the permutations folder
pValues1 <- pEst(path="permutations/",
scores=r,
markersPerIteration = 350,
printProg = T,
pCorrection = "none")
pValuesX1 <- pValues1[mappingData1$genotype2group]
#These steps (until markerPositions) are not useful for the way I presented the results
chrVec1 <- d$chromosome
QTL_list1 <- QTLgrouper(pmat = pValuesX1,
sigThreshold = 0.01,
corThreshold = 0.99,
distThreshold = 1,
genotype = genotype1,
chrVec = chrVec1)
#Plotting the marker positions
markerPositions1 <- d[,c(1,2)]
markerPositions1$chromosome<-gsub("chromosome_1",1,markerPositions1$chromosome)
markerPositions1$chromosome<-gsub("chromosome_2",2,markerPositions1$chromosome)
markerPositions1$chromosome<-gsub("chromosome_3",3,markerPositions1$chromosome)
markerPositions1[,3]=markerPositions1$position
#the writeQTL is what is in the tutorial but I didn't find it useful as a visualisation of results
writeQTL(QTLlist = QTL_list1,traitNames = "Flocc",markerPositions = markerPositions1,path="myResults1.qtl")
qtl1 <- readQTL(path = "myResults1.qtl")
qtl1
#Presenting results
#barplot
barplot(-log10(pValuesX1))
abline(h=-log10(0.05/length(pValues)),col="red")
#manhattan plot
results.tab=markerPositions1[,-3]
results.tab[,3]=pValuesX1
colnames(results.tab)=c("CHR","BP","P")
results.tab=results.tab[-which(is.na(results.tab)),]
results.tab$CHR=as.numeric(unlist(results.tab$CHR))
results.tab[,4]=rep("snp",length(results.tab$CHR))
colnames(results.tab)[4]="SNP"
manhattan(results.tab,ylim = c(0,7), suggestiveline = F, genomewideline = F,cex = 0.7)
abline(h=-log10(0.05/length(pValues)),col="red")
text(x=1,y=-log10(0.05/length(pValues))+0.1,labels="       p=0.00001",col="red",cex=0.7)
#from the following, determine the regions to use for reg_map below
markerPositions1[which(-log10(pValuesX1)>=2),]
#Presenting results
#barplot
barplot(-log10(pValuesX1))
abline(h=-log10(0.05/length(pValues)),col="red")
#manhattan plot
results.tab=markerPositions1[,-3]
results.tab[,3]=pValuesX1
colnames(results.tab)=c("CHR","BP","P")
results.tab=results.tab[-which(is.na(results.tab)),]
results.tab$CHR=as.numeric(unlist(results.tab$CHR))
results.tab[,4]=rep("snp",length(results.tab$CHR))
colnames(results.tab)[4]="SNP"
manhattan(results.tab,ylim = c(0,7), suggestiveline = F, genomewideline = F,cex = 0.7)
abline(h=-log10(0.05/length(pValues)),col="red")
text(x=1,y=-log10(0.05/length(pValues))+0.1,labels="       p=0.00001",col="red",cex=0.7)
#from the following, determine the regions to use for reg_map below
markerPositions1[which(-log10(pValuesX1)>=2),]
#Below the wd is the folder in which the permutations folder is (not IN the permutation folder)
setwd("/Users/bencekover/Library/CloudStorage/OneDrive-UniversityCollegeLondon/MSci Bahler lab/S.-Pombe-biofilm/Bence folder/QTL mapping/permutations")
#The path below is the permutations folder
pValues1 <- pEst(path="permutations/",
scores=r,
markersPerIteration = 350,
printProg = T,
pCorrection = "none")
markerPositions1$chromosome<-gsub("chromosome_1",1,markerPositions1$chromosome)
markerPositions1$chromosome<-gsub("chromosome_2",2,markerPositions1$chromosome)
markerPositions1$chromosome<-gsub("chromosome_3",3,markerPositions1$chromosome)
markerPositions1[,3]=markerPositions1$position
#the writeQTL is what is in the tutorial but I didn't find it useful as a visualisation of results
writeQTL(QTLlist = QTL_list1,traitNames = "Flocc",markerPositions = markerPositions1,path="myResults1.qtl")
qtl1 <- readQTL(path = "myResults1.qtl")
qtl1
#Presenting results
#barplot
barplot(-log10(pValuesX1))
abline(h=-log10(0.05/length(pValues)),col="red")
#manhattan plot
results.tab=markerPositions1[,-3]
results.tab[,3]=pValuesX1
colnames(results.tab)=c("CHR","BP","P")
results.tab=results.tab[-which(is.na(results.tab)),]
results.tab$CHR=as.numeric(unlist(results.tab$CHR))
results.tab[,4]=rep("snp",length(results.tab$CHR))
colnames(results.tab)[4]="SNP"
manhattan(results.tab,ylim = c(0,7), suggestiveline = F, genomewideline = F,cex = 0.7)
abline(h=-log10(0.05/length(pValues)),col="red")
text(x=1,y=-log10(0.05/length(pValues))+0.1,labels="       p=0.00001",col="red",cex=0.7)
#from the following, determine the regions to use for reg_map below
markerPositions1[which(-log10(pValuesX1)>=2),]
#Below the wd is the folder in which the permutations folder is (not IN the permutation folder)
setwd("/Users/bencekover/Library/CloudStorage/OneDrive-UniversityCollegeLondon/MSci Bahler lab/S.-Pombe-biofilm/Bence folder/QTL mapping/permutations")
#The path below is the permutations folder
pValues1 <- pEst(path="permutations/",
scores=r,
markersPerIteration = 350,
printProg = T,
pCorrection = "none")
pValuesX1 <- pValues1[mappingData1$genotype2group]
#These steps (until markerPositions) are not useful for the way I presented the results
chrVec1 <- d$chromosome
QTL_list1 <- QTLgrouper(pmat = pValuesX1,
sigThreshold = 0.01,
corThreshold = 0.99,
distThreshold = 1,
genotype = genotype1,
chrVec = chrVec1)
#Plotting the marker positions
markerPositions1 <- d[,c(1,2)]
markerPositions1$chromosome<-gsub("chromosome_1",1,markerPositions1$chromosome)
markerPositions1$chromosome<-gsub("chromosome_2",2,markerPositions1$chromosome)
markerPositions1$chromosome<-gsub("chromosome_3",3,markerPositions1$chromosome)
markerPositions1[,3]=markerPositions1$position
#the writeQTL is what is in the tutorial but I didn't find it useful as a visualisation of results
writeQTL(QTLlist = QTL_list1,traitNames = "Flocc",markerPositions = markerPositions1,path="myResults1.qtl")
qtl1 <- readQTL(path = "myResults1.qtl")
qtl1
#Presenting results
#barplot
barplot(-log10(pValuesX1))
abline(h=-log10(0.05/length(pValues1)),col="red")
#manhattan plot
results.tab=markerPositions1[,-3]
results.tab[,3]=pValuesX1
colnames(results.tab)=c("CHR","BP","P")
results.tab=results.tab[-which(is.na(results.tab)),]
results.tab$CHR=as.numeric(unlist(results.tab$CHR))
results.tab[,4]=rep("snp",length(results.tab$CHR))
colnames(results.tab)[4]="SNP"
manhattan(results.tab,ylim = c(0,7), suggestiveline = F, genomewideline = F,cex = 0.7)
abline(h=-log10(0.05/length(pValues1)),col="red")
text(x=1,y=-log10(0.05/length(pValues1))+0.1,labels="       p=0.00001",col="red",cex=0.7)
#from the following, determine the regions to use for reg_map below
markerPositions1[which(-log10(pValuesX1)>=2),]
pValues1
qtl1
p.adjust(pValues,method = "BH")
p.adjust(pValues1,method = "BH")
bh_adj_p_vals = p.adjust(pValues1,method = "BH")
which(bh_adj_p_vals <0.05)
qtl1
qtl1$mostSignificantPredictor
qtl1[[2]]$mostSignificantPredictor
genotype1[qtl1[[2]]$mostSignificantPredictor]
genotype1[qtl1[[2]]$mostSignificantPredictor,]
genotype1[qtl1[[2]]$mostSignificantPredictor]
genotype1
View(genotype1)
genotype1[,qtl1[[2]]$mostSignificantPredictor]
plot(genotype1, phenotype1)
phenotype1
plot(genotype1[,qtl1[[2]]$mostSignificantPredictor], phenotype1)
plot(genotype1[,qtl1[[2]]$mostSignificantPredictor], phenotype1, alpha=0.5)
plot?
plot(genotype1[,qtl1[[2]]$mostSignificantPredictor], phenotype1, a=0.5)
plot(genotype1[,qtl1[[2]]$mostSignificantPredictor], phenotype1)
plot(genotype1, phenotype1)
genotype1[,qtl1[[2]]$mostSignificantPredictor]
genotype1[,qtl1[[1]]$mostSignificantPredictor]
plot(genotype1[,qtl1[[1]]$mostSignificantPredictor], phenotype1)
d[,qtl1[[2]]$mostSignificantPredictor]
d[qtl1[[2]]$mostSignificantPredictor]
d[qtl1[[2]]$mostSignificantPredictor,]
qtl1[[2]]
d[qtl1[[2]]$predictors,]
d[qtl1[[2]]$predictors,]d[qtl1[[2]]$predictors[0],]
d[qtl1[[2]]$predictors,]d[qtl1[[2]]$predictors[1],]
d[qtl1[[2]]$predictors,]d[qtl1[[2]]$predictors[1],]
d[qtl1[[2]]$predictors[0],]
d[c(qtl1[[2]]$predictors[0]:qtl1[[2]]$predictors[1]),]
c(qtl1[[2]]$predictors[0]:qtl1[[2]]$predictors[1])
qtl1
markerPositions1
QTL_list
QTL_list1
#The path below is the permutations folder
pValues1 <- pEst(path="permutations/",
scores=r,
markersPerIteration = 350,
printProg = T,
pCorrection = "none")
pValuesX1 <- pValues1[mappingData1$genotype2group]
#These steps (until markerPositions) are not useful for the way I presented the results
chrVec1 <- d$chromosome
QTL_list1 <- QTLgrouper(pmat = pValuesX1,
sigThreshold = 0.01,
corThreshold = 0.99,
distThreshold = 1,
genotype = genotype1,
chrVec = chrVec1)
#Plotting the marker positions
markerPositions1 <- d[,c(1,2)]
markerPositions1$chromosome<-gsub("chromosome_1",1,markerPositions1$chromosome)
markerPositions1$chromosome<-gsub("chromosome_2",2,markerPositions1$chromosome)
markerPositions1$chromosome<-gsub("chromosome_3",3,markerPositions1$chromosome)
markerPositions1[,3]=markerPositions1$position
#the writeQTL is what is in the tutorial but I didn't find it useful as a visualisation of results
writeQTL(QTLlist = QTL_list1,traitNames = "Flocc",markerPositions = markerPositions1,path="myResults1.qtl")
qtl1 <- readQTL(path = "myResults1.qtl")
qtl1
#Presenting results
#barplot
barplot(-log10(pValuesX1))
abline(h=-log10(0.05/length(pValues1)),col="red")
#manhattan plot
results.tab=markerPositions1[,-3]
results.tab[,3]=pValuesX1
colnames(results.tab)=c("CHR","BP","P")
results.tab=results.tab[-which(is.na(results.tab)),]
results.tab$CHR=as.numeric(unlist(results.tab$CHR))
results.tab[,4]=rep("snp",length(results.tab$CHR))
colnames(results.tab)[4]="SNP"
manhattan(results.tab,ylim = c(0,7), suggestiveline = F, genomewideline = F,cex = 0.7)
abline(h=-log10(0.05/length(pValues1)),col="red")
text(x=1,y=-log10(0.05/length(pValues1))+0.1,labels="       p=0.00001",col="red",cex=0.7)
#from the following, determine the regions to use for reg_map below
markerPositions1[which(-log10(pValuesX1)>=2),]
#from the following, determine the regions to use for reg_map below
markerPositions1[which(-log10(pValuesX1)>=2.5),]
markerPositions1[which(-log10(pValuesX1)>=2.2),]
genotype1[,qtl1[[2]]$mostSignificantPredictor]
#loading in the washing_phenotype measurements
phenotype1<-read.csv("/Users/bencekover/Library/CloudStorage/OneDrive-UniversityCollegeLondon/MSci Bahler lab/S.-Pombe-biofilm/Bence folder/QTL mapping/washing_phenotypes.csv")
phenotype1<-phenotype1[,-1]
phenotype1<-phenotype1[which(phenotype1$strain %in% rownames(genotype1)),]
View(phenotype1)
sampleInfo1
phenotype
phenotype1
#install.packages("/Users/bencekover/Downloads/RFQTL.tar.gz", repos = NULL)
library(RFQTL)
#install.packages("randomForest")
library(randomForest)
library(qqman)
#loading in the genotype presence-absence matrix
d<-read.table(file = '/Users/bencekover/Library/CloudStorage/OneDrive-UniversityCollegeLondon/MSci Bahler lab/S.-Pombe-biofilm/Bence folder/QTL mapping/SupplementaryDataset_S7_genotype.tsv', sep = '\t', header = TRUE)
genotype1<-d[,-c(1:4)]
genotype1<-data.matrix(genotype1)
genotype1<-t(genotype1)
#loading in the washing_phenotype measurements
phenotype1<-read.csv("/Users/bencekover/Library/CloudStorage/OneDrive-UniversityCollegeLondon/MSci Bahler lab/S.-Pombe-biofilm/Bence folder/QTL mapping/washing_phenotypes.csv")
phenotype1<-phenotype1[,-1]
phenotype1<-phenotype1[which(phenotype1$strain %in% rownames(genotype1)),]
strainNames1 <- phenotype1$strain
phenotype1 <- phenotype1$ratio
sampleInfo1 <- sapply(strainNames1,FUN=function(x){
which(rownames(genotype1)==x)
})
#loading in the washing_phenotype measurements
phenotype1<-read.csv("/Users/bencekover/Library/CloudStorage/OneDrive-UniversityCollegeLondon/MSci Bahler lab/S.-Pombe-biofilm/Bence folder/QTL mapping/washing_phenotypes.csv")
phenotype1<-phenotype1[,-1]
phenotype1<-phenotype1[which(phenotype1$strain %in% rownames(genotype1)),]
strainNames1 <- phenotype1$strain
phenotype1
d[qtl1[[2]]$predictors,]
QTL_list1
markerPositions1[which(-log10(pValuesX1)>=2.2),]
markerPositions1[which(-log10(pValuesX1)>=2),]
markerPositions1[which(-log10(pValuesX1)>=2.5),]
genotype1[,2255]
genotype1[,2256]
genotype1[,2257]
genotype1[,2258]
genotype1[,2255]
genotype1[,2254]
genotype1[,2255]
genotype1[,2256]
genotype1[,2257]
genotype1[,2257]
snps
snps = markerPositions1[which(-log10(pValuesX1)>=2),]
snps
snps.index
snps
row.names(snps)
d[row.names(snps)]
d[row.names(snps),]
snps = markerPositions1[which(-log10(pValuesX1)>=2),]
results = d[row.names(snps)]
#from the following, determine the regions to use for reg_map below
snps = markerPositions1[which(-log10(pValuesX1)>=2),]
results = d[row.names(snps),]
write.csv(results,"results.csv")
markerPositions1[which(-log10(pValuesX1)>=2.5),]
knitr::opts_chunk$set(echo = TRUE)
#BiocManager::install("topGO")
#install.packages("org.Hs.eg.db")
library(tidyverse)
library(Seurat)
library(SeuratData)
library(patchwork)
library(sctransform)
library(readr)
library(data.table)
library(topGO)
load(file='/Users/bencekover/Library/CloudStorage/OneDrive-UniversityCollegeLondon/duchen lab/rna seq/seurat data/unpacked data/data files/bmcite.rda')
knitr::opts_chunk$set(echo = TRUE)
#BiocManager::install("topGO")
#install.packages("org.Hs.eg.db")
library(tidyverse)
library(Seurat)
library(SeuratData)
library(patchwork)
library(sctransform)
library(readr)
library(data.table)
library(readxl)
library(topGO)
pombe_seq <- read_excel("/Users/bencekover/Library/CloudStorage/OneDrive-UniversityCollegeLondon/MSci Bahler lab/S.-Pombe-biofilm/external data/Saint_2019/rna_seq_pombe.xlsx",sheet="Table_S4")
map <- fread("/Users/bencekover/Library/CloudStorage/OneDrive-UniversityCollegeLondon/MSci Bahler lab/S.-Pombe-biofilm/external data/gene_IDs_names_products.tsv", header=F)
for (i in 1:length(pombe_seq$Systematic_ID)){
index = which(map$V1==pombe_seq$Systematic_ID[i])
if (length(index) == 1){
if (map$V3[index] != ""){
pombe_seq$Systematic_ID[i] = map$V3[index]
}}
}
pombe_seq_obj <- CreateSeuratObject(counts = pombe_seq[,-1],row.names=pombe_seq$Systematic_ID )
VlnPlot(bmcite, features = c("nFeature_RNA", "nCount_RNA",), ncol = 3)
VlnPlot(pombe_seq_obj, features = c("nFeature_RNA", "nCount_RNA",), ncol = 2)
VlnPlot(pombe_seq_obj, features = c("nFeature_RNA", "nCount_RNA"), ncol = 2)
filter_data <-function(seuratobj){
min_feat = quantile(seuratobj[["nFeature_RNA"]]$nFeature_RNA, 0.2)
min_count = quantile(seuratobj[["nCount_RNA"]]$nCount_RNA, 0.2)
max_feat = quantile(seuratobj[["nFeature_RNA"]]$nFeature_RNA, 0.98)
max_count = quantile(seuratobj[["nCount_RNA"]]$nCount_RNA, 0.98)
so <- subset(seuratobj, subset = nFeature_RNA > min_feat  &
nFeature_RNA < max_feat  &
nCount_RNA > min_count &
nCount_RNA < max_count)
return(so)
pombe_seq_obj <- filter_data(pombe_seq_obj)
}
VlnPlot(pombe_seq_obj, features = c("nFeature_RNA", "nCount_RNA"), ncol = 2)
filter_data <-function(seuratobj){
min_feat = quantile(seuratobj[["nFeature_RNA"]]$nFeature_RNA, 0.2)
min_count = quantile(seuratobj[["nCount_RNA"]]$nCount_RNA, 0.2)
max_feat = quantile(seuratobj[["nFeature_RNA"]]$nFeature_RNA, 0.95)
max_count = quantile(seuratobj[["nCount_RNA"]]$nCount_RNA, 0.95)
so <- subset(seuratobj, subset = nFeature_RNA > min_feat  &
nFeature_RNA < max_feat  &
nCount_RNA > min_count &
nCount_RNA < max_count)
return(so)
pombe_seq_obj <- filter_data(pombe_seq_obj)
}
VlnPlot(pombe_seq_obj, features = c("nFeature_RNA", "nCount_RNA"), ncol = 2)
filter_data <-function(seuratobj){
min_feat = quantile(seuratobj[["nFeature_RNA"]]$nFeature_RNA, 0.2)
min_count = quantile(seuratobj[["nCount_RNA"]]$nCount_RNA, 0.2)
max_feat = quantile(seuratobj[["nFeature_RNA"]]$nFeature_RNA, 0.95)
max_count = quantile(seuratobj[["nCount_RNA"]]$nCount_RNA, 0.95)
so <- subset(seuratobj, subset = nFeature_RNA > min_feat  &
nFeature_RNA < max_feat  &
nCount_RNA > min_count &
nCount_RNA < max_count)
return(so)
}
pombe_seq_obj <- filter_data(pombe_seq_obj)
VlnPlot(pombe_seq_obj, features = c("nFeature_RNA", "nCount_RNA"), ncol = 2)
pombe_seq_obj %>%NormalizeData()  %>%
FindVariableFeatures()%>%
ScaleData()%>%
RunPCA() %>%
FindNeighbors(dims = 1:30) %>%
RunUMAP(dims = 1:30) %>%
FindClusters()
DefaultAssay(pombe_seq_obj) <- "RNA"
print(FeaturePlot(pombe_seq_obj, reduction = "umap",features = c("gsf2")))
pombe_seq_obj<- pombe_seq_obj %>% NormalizeData()  %>%
FindVariableFeatures()%>%
ScaleData()%>%
RunPCA() %>%
FindNeighbors(dims = 1:30) %>%
RunUMAP(dims = 1:30) %>%
FindClusters()
DefaultAssay(pombe_seq_obj) <- "RNA"
print(FeaturePlot(pombe_seq_obj, reduction = "umap",features = c("gsf2")))
count_mat <- pombe_seq_obj[["RNA"]]@data
matrix_mod<-as.matrix(count_mat)
rm(count_mat)
gene<-as.numeric(matrix_mod["mbx2",])
correlations_p<-apply(matrix_mod,1,function(x){cor.test(gene,x)$p.value})
correlations_r<-apply(matrix_mod,1,function(x){cor.test(gene,x)$estimate})
all.genes <- rownames(pombe_seq_obj)
corr_tibb <-tibble(cor_p = correlations_p,
cor_r = correlations_r, gene = all.genes,
index = 1:length(all.genes))
corr_tibb <- corr_tibb %>%
filter(gene!="mbx2")%>%
mutate(p_adj = cor_p*length(all.genes)) %>% arrange(p_adj)
print(corr_tibb)
wash_corr = read_csv("/Users/bencekover/Library/CloudStorage/OneDrive-UniversityCollegeLondon/MSci Bahler lab/S.-Pombe-biofilm/Bence folder/Analysis of Clement-Ziza RNA-seq/wash_corr.csv", header=T)
wash_corr = read_csv("/Users/bencekover/Library/CloudStorage/OneDrive-UniversityCollegeLondon/MSci Bahler lab/S.-Pombe-biofilm/Bence folder/Analysis of Clement-Ziza RNA-seq/wash_corr.csv")
#orthologs =
View(wash_corr)
